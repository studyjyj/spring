[ 02 ] DI(Dependency Injection) 개념 및 활용 – 기초단계에서 가장 중요한 개념

1. 스프링을 이용한 객체 생성과 조립(스프링은 객체 생성과 조립을 하는 컨테이너라 볼 수 있다)
	스프링 부트는 기본적으로 자바 config를 기반으로 하기 때문에 DI 설정파일을 추가하는 기능이 제공되지 않음. 그래서 sping3을 플러그인 하여야 한다.
	프로젝트 오른쪽 마우스 -> Configure -> Convert to Maven Project 
	Pom.xml에 다음(lombok)을 추가 

<!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
	<dependency>
	    <groupId>org.projectlombok</groupId>
	    <artifactId>lombok</artifactId>
	    <version>1.18.26</version>
	    <scope>provided</scope>
	</dependency>

2. 스프링 설정 파일의 이해 ; 필드에 대한 setter함수들이 있어서 property의 value값을 줄 수 있다.
	[ch02_DI.com.lec.ch02.ex1_cal] 예제 참조

3. 스프링 프로퍼티 설정 : 기초데이터, list타입, 다른 빈 객체 참조 방법 등을 살펴본다
	[ch02_DI.com.lec.ch02.ex2_bmi] 예제 참조

4. 스프링 컨테이너의 이해 스프링 컨테이너를 생성하고 컴포넌트를 사용하는 방법
	[ch02_DI.com.lec.ch02.ex3_student] 예제 참조
	String resourceLocation = "classpath:bmi/applicationCTX3.xml";
	// 스프링 컨테이너 생성
	AbstractApplicationContext ctx = new GenericXmlApplicationContext(resourceLocation);
	// 스프링 컨테이너에서 컴포넌트 가져옴
	MyInfo myInfo = ctx.getBean(“myInfo”, MyInfo.class);
	myInfo.getInfo();
	ctx.close();
	// AbstractApplicationContext 추상클래스 위로는 ApplicationContext 인터페이스 밑으로 상속받는 얘들중의 하나가 		GenericXmlApplicationContext. 매개변수로 위치를 주면 IOC 컨테이너(스프링 컨테이너)가 생성. 즉 부품이 된 형태이며. 그 부품에서 “myInfo”라는 	빈(이 안에도 bmiCalculator 주입됨)을 뽑아서 myInfo라는 변수에 넣음. 객체를 생성하고 조립하는 것을 Spring 컨테이너가 하고 있음

5. 의존 관계
	[ch02_DI.com.lec.ch02.ex3_student] 예제 참조
	DI는 Dependency Injection의 약자로 우리말로 '의존하는 객체를 주입하는 것‘  이며. 의존주입은 setter를 통한 주입과 생성자를 통한 주입이 있다. 
		(1) xml파일을 이용한 의존주입
		(2) java파일을 이용한 의존주입

6. DI 사용에 따른 장점
	아직은 스프링의 DI사용에 따른 장점을 많이 느끼지 않고 DI를 사용하니 더욱 복잡하고 시간이 더 많이 소요된다고 생각 된다 (oop언어를 배울 때, class 나	온 후 interface가 나온다. Interface는 구현도 없고 선언만 하는데 굳이 interface를 만들까 생각하지만 interface를 만들므로 타입을 통일시킬 수 있고, 	강제로 오버라이드하게 해서 작업을 통일시킬 수 있다는 여러가지 장점이 있다. 이 장점은 규모가 큰 프로젝트를 할수록 느껴진다고 한다.)
	작은 규모의 프로젝트에서는 스프링의 DI사용을 하는 것 보다 일반적인 방법을 사용하여 개발하는 것이 더욱 빠르고, 개발에 따른 스트레스를 줄일 수 	있다. 	하지만 규모가 어느 정도 커지고, 추후 유지보수 업무가 발생시에는 DI를 이용한 개발의 장점을 느낄 수 있다고 한다.




